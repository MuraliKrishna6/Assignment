[{"C:\\Users\\kmural\\task5\\src\\index.js":"1","C:\\Users\\kmural\\task5\\src\\App.js":"2","C:\\Users\\kmural\\task5\\src\\reportWebVitals.js":"3","C:\\Users\\kmural\\task5\\src\\Main.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":187,"mtime":1611234160837,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":11326,"mtime":1611308092863,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1g9i41b",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\kmural\\task5\\src\\index.js",[],["21","22"],"C:\\Users\\kmural\\task5\\src\\App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n     </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\kmural\\task5\\src\\reportWebVitals.js",[],"C:\\Users\\kmural\\task5\\src\\Main.js",["24","25","26","27","28","29","30","31","32"],"import React, {useState} from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\"\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nexport default function Main() {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n\r\n  })\r\n  );\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const [name, setName] = useState(\"\")\r\n  const [title, settitle] = useState(\"\")\r\n  const [content, setContent] = useState(\"\")\r\n\r\n  const [error1, setError1] = useState(false)\r\n  const [error2, setError2] = useState(false)\r\n  const [error3, setError3] = useState(false)\r\n  \r\n\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const [listData2, setListData2] = useState([]);\r\n\r\n  let userInfoArray = []\r\n  let listitems = []\r\n \r\n\r\n  var currDate = new Date()\r\n  var date = currDate.toISOString().substr(0, 10);\r\n\r\n\r\n\r\n\r\n\r\n  const changeValue = (e) => {\r\n    if (e.target.name == \"name\") {\r\n     setName(e.target.value)\r\n    }\r\n    if (e.target.name == \"title\") {\r\n      settitle(e.target.value)\r\n    }\r\n    if (e.target.name == \"content\") {\r\n      setContent(e.target.value)\r\n     }\r\n  }\r\n\r\n\r\n\r\nuserInfoArray = JSON.parse(localStorage.getItem(\"userdata\")) \r\n\r\n\r\n const filteredItems = userInfoArray?.filter((x) =>\r\n      x.name.toLocaleLowerCase().includes(filterText) ||\r\n      x.title.toLocaleLowerCase().includes(filterText)\r\n  );\r\n  let listData1 = [];  \r\n  const filterData = () => {\r\n     if (listData2.length > 0) {\r\n       setListData2(listData1)\r\n   }\r\n     else {\r\n      const itemsToDisplay = filterText ? filteredItems : listData1;\r\n      setListData2(itemsToDisplay);\r\n   }\r\n};\r\n\r\n\r\n\r\n\r\n  if (userInfoArray== null||userInfoArray.length==0) {\r\n    listitems = \"No data found\"\r\n  }else{\r\n    listitems = userInfoArray?.map((x, i) => {\r\n       return <li key={i} style={{ listStyleType: \"none\" }}>\r\n        <Card style={{ marginBottom: \"15PX\",height:\"100PX\" }} onClick={() => {\r\n          editdata(x, i)\r\n          setName(x.name)\r\n          settitle(x.title)\r\n          setContent(x.content)\r\n        }\r\n        }>\r\n          <Typography style={{ marginTop: \"20PX\" }}>\r\n            <span>Notes title :<b>{x.title}</b> </span><br />\r\n            </Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            content: {x.content}\r\n          </Typography>\r\n        </Card>\r\n      </li>\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  const editdata = (x, i) => {\r\n    const localvalue = x\r\n    localStorage.setItem(\"localvalue\", JSON.stringify(localvalue))\r\n    localStorage.setItem(\"indexvalue\", JSON.stringify(i))\r\n    return {\r\n      x, i\r\n    }\r\n}\r\n\r\n\r\n  const deleteData = () => {\r\n    const localeditdata2 = JSON.parse(localStorage.getItem(\"localvalue\"))\r\n    const indexValue2 = JSON.parse(localStorage.getItem(\"indexvalue\"))\r\n    userInfoArray = JSON.parse(localStorage.getItem(\"userdata\")) || []\r\n    if (localeditdata2) {\r\n      userInfoArray.filter(v => {\r\n        if (v.name == localeditdata2.name) {\r\n          userInfoArray.splice(indexValue2, 1);\r\n          localStorage.setItem(\"userdata\", JSON.stringify(userInfoArray))\r\n        }\r\n      })\r\n      setName(\"\")\r\n      settitle(\"\")\r\n      setContent(\"\")\r\n      localStorage.removeItem('localvalue')\r\n      localStorage.removeItem('indexvalue')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const newForm = () => {\r\n    setName(\"\")\r\n    settitle(\"\")\r\n    setContent(\"\")\r\n    localStorage.removeItem(\"indexvalue\")\r\n    localStorage.removeItem(\"localvalue\")\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const submitData = (e) => {\r\n    if(name.length===0){\r\n      setError1(!error1)\r\n    }\r\n    if(name.length===0){\r\n      setError2(!error2)\r\n    }\r\n    if(name.length===0){\r\n      setError3(!error3)\r\n    }\r\n    if(name.length>0&&title.length>0&&content.length>0){\r\n    const localeditdata = JSON.parse(localStorage.getItem(\"localvalue\"))\r\n    const indexValue = JSON.parse(localStorage.getItem(\"indexvalue\"))\r\n    userInfoArray = JSON.parse(localStorage.getItem(\"userdata\")) || []\r\n    if (localeditdata) {\r\n      userInfoArray.filter(v => {\r\n        if (v.name == localeditdata.name) {\r\n          let obj = {\r\n            name: name,\r\n            title: title,\r\n            content: content\r\n          }\r\n          userInfoArray.splice(indexValue, 1, obj);\r\n          localStorage.setItem(\"userdata\", JSON.stringify(userInfoArray))\r\n        }\r\n      })\r\n      setName(\"\")\r\n      settitle(\"\")\r\n      setContent(\"\")\r\n      localStorage.removeItem('localvalue')\r\n      localStorage.removeItem('indexvalue')\r\n    } else {\r\n      userInfoArray = JSON.parse(localStorage.getItem(\"userdata\")) || []\r\n        let obj = {\r\n          name: name,\r\n          title: title,\r\n          date: date,\r\n          content: content\r\n        }\r\n        console.log(\"obj\",obj)\r\n        userInfoArray.push(obj)\r\n        localStorage.setItem(\"userdata\", JSON.stringify(userInfoArray));\r\n        setName(\"\")\r\n        settitle(\"\")\r\n        setContent(\"\")\r\n      }\r\n    }\r\n   }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={3}>\r\n           <TextField\r\n            value={filterText}\r\n            onChange={(e) => setFilterText(e.target.value.toLocaleLowerCase())}\r\n            style={{ margin: 8 }}\r\n           placeholder=\"Search card\"\r\n            name=\"searchValue\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          /> \r\n           <FormControl className={classes.formControl}>\r\n         \r\n            <Select\r\n               native\r\n              onChange={(e) => setFilterText(e.target.value.toLocaleLowerCase())}\r\n              inputProps={{\r\n                name: 'age',\r\n                id: 'age-native-simple',\r\n              }}\r\n            >\r\n              <option>--select--</option>\r\n              {userInfoArray?.map(({ title }) => (\r\n                <option>{title}</option>\r\n              ))}\r\n            </Select>\r\n          </FormControl> \r\n         \r\n           <Button\r\n          style={{ marginBottom: \"15PX\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ textAlign: \"center\" }}\r\n            onClick={() => filterData()}>\r\n            Search\r\n        </Button> \r\n          \r\n     \r\n           <div style={{ border: \"2px solid\" }}>\r\n            <h4>Applied Filters:</h4>\r\n            {!filteredItems?.length && (\r\n              <div>There are no items to display adjust your filter criteria</div>\r\n            )}\r\n            {listData2.map((x) => (\r\n              <div key={x.y}>\r\n                <p >Created:{x.currentDate1}</p>\r\n                <p> Note For:{x.name}</p>\r\n                <p>Title:{x.title}</p>\r\n              </div>\r\n            ))}\r\n          </div> \r\n          <Paper className={classes.paper} style={{ marginTop: \"30PX\" }}>\r\n            {\r\n              <ul>\r\n                {listitems}\r\n              </ul>\r\n            }\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={9}>\r\n          <Paper className={classes.paper}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={6} />\r\n              <Grid item xs={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ textAlign: \"center\" }}\r\n                  onClick={newForm}>\r\n                  New\r\n              </Button>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ textAlign: \"center\" }}\r\n                  onClick={submitData}\r\n                  type=\"button\" >\r\n                    Save\r\n                  </Button>\r\n              </Grid>\r\n              <Grid item xs={2} className=\"buttonText\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ textAlign: \"center\" }}\r\n                  onClick={deleteData} >\r\n                  Delete\r\n              </Button>\r\n              </Grid>\r\n            </Grid>\r\n            <form>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"Created date\"\r\n                    fullWidth\r\n                    disabled\r\n                    type=\"date\"\r\n                    name=\"currentDate\"\r\n                    value={date}\r\n                    variant=\"outlined\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }} />\r\n                   \r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"name\"\r\n                    value={name}\r\n                    style={{ margin: 8 }}\r\n                 \r\n                    onChange={changeValue}\r\n                    name=\"name\"\r\n                    fullWidth\r\n                   \r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }} />\r\n            \r\n                </Grid>\r\n              </Grid>\r\n               {error1?\"name is required\":null}\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"title\"\r\n                    value={title}\r\n                    onChange={changeValue}\r\n                    style={{ margin: 8 }}\r\n                    name=\"title\"\r\n                    fullWidth\r\n                    \r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }} />\r\n             \r\n                </Grid>\r\n              </Grid>\r\n              {error2?\"title is required\":null}\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                  <TextareaAutosize\r\n                    value={content}\r\n                    // rowsMax={10}\r\n                    rows={20}\r\n                    cols={160}\r\n                    onChange={changeValue}\r\n                    name=\"content\"\r\n                    variant=\"outlined\"\r\n                    aria-label=\"maximum height\" \r\n                    />\r\n               </Grid>\r\n              </Grid>\r\n              {error3?\"content is required\":null}\r\n            </form>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":12},{"ruleId":"41","severity":1,"message":"42","line":61,"column":23,"nodeType":"43","messageId":"44","endLine":61,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":64,"column":23,"nodeType":"43","messageId":"44","endLine":64,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":67,"column":23,"nodeType":"43","messageId":"44","endLine":67,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":95,"column":49,"nodeType":"43","messageId":"44","endLine":95,"endColumn":51},{"ruleId":"45","severity":1,"message":"46","line":136,"column":30,"nodeType":"47","messageId":"48","endLine":136,"endColumn":32},{"ruleId":"41","severity":1,"message":"42","line":137,"column":20,"nodeType":"43","messageId":"44","endLine":137,"endColumn":22},{"ruleId":"45","severity":1,"message":"46","line":180,"column":30,"nodeType":"47","messageId":"48","endLine":180,"endColumn":32},{"ruleId":"41","severity":1,"message":"42","line":181,"column":20,"nodeType":"43","messageId":"44","endLine":181,"endColumn":22},{"ruleId":"49","severity":1,"message":"50","line":253,"column":13,"nodeType":"51","endLine":253,"endColumn":44},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]